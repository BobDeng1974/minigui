/*
    EmbeddedGUI Library version 0.5.4
    Copyright (C) 2009  WangChao

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation ,either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
	ECursor.h
*/

#include "EGUIMacro.h"
#include "EComponent.h"

#ifndef ECURSOR_H
#define	ECURSOR_H

#ifdef EG_CURSOR

#ifdef WIN32_SIMULATE
#include "BufferDriver.h"
#endif  //WIN32_SIMULATE

#ifdef DOT_MATRIX_LCD
#include "LCDDriver.h"
#endif //DOT_MATRIX_LCD

#ifdef EG_RGB_COLOR
struct ECursorBuffer{
	EColor m_cCursorShape[16][16];
};

static const unsigned char EG_DefaultCursorShape[16][16]={
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80
};

class ECursor{
public:
	ECursor(){
		this->m_bOldBufferValid=false;
		this->ClearCursorShape();
	}
	ECursor(ECursorBuffer* pcursor){
		this->m_bOldBufferValid=false;
		this->m_cbCursor=*pcursor;
	}

	EPosition SetCursorPosition(const EPosition& curPos);
	void LoadCursorShape(const unsigned char* pcursor);
	void ClearCursorShape();

protected:
	bool m_bOldBufferValid;
	EPosition m_pOldBufferPos;
	ECursorBuffer m_cbOldBuffer;
	ECursorBuffer m_cbCursor;
};
#else
struct ECursorBuffer{
	unsigned char m_cCursorShape[8];
};
	
//    00001111
//    00000011
//    00000101
//    00001001
//    00010000
//    00100000
//    01000000
//    10000000
static const unsigned char EG_DefaultCursorShape[8]={0x0F,0x03,0x05,0x09,0x10,0x20,0x40,0x80};

class ECursor{
public:
	ECursor(){
		this->ClearCursorShape();
	}
	ECursor(ECursorBuffer* pcursor){
		this->m_cbCursor=*pcursor;
	}

	EPosition SetCursorPosition(const EPosition& curPos);
	void LoadCursorShape(const unsigned char* pcursor){
		for(int n=0;n<8;n++)
			this->m_cbCursor.m_cCursorShape[n]=pcursor[n];
	}
	void ClearCursorShape(){
		for(int n=0;n<8;n++){
			this->m_cbCursor.m_cCursorShape[n]=0;	
		}
	}
protected:
	bool m_bOldBufferValid;
	EPosition m_pOldBufferPos;
	unsigned char m_caOldBuffer[2][8];
	ECursorBuffer m_cbCursor;
};	

#endif

#endif //EG_CURSOR

#endif //ECURSOR_H
